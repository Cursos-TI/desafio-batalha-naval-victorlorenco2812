#include <stdio.include <stdio.h>
#include <stdlib.h> // Para a função abs()

#define BOARD_SIZE 10
#define SKILL_SIZE 7 // Tamanho das matrizes de habilidade (deve ser ímpar para ter centro)

// Definições para os elementos do tabuleiro
#define WATER 0
#define SHIP 3
#define SKILL_EFFECT 5

// Função para exibir o tabuleiro
void printBoard(int board[BOARD_SIZE][BOARD_SIZE]) {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Função para inicializar o tabuleiro com água e alguns navios
void initializeBoard(int board[BOARD_SIZE][BOARD_SIZE]) {
    for (int i = 0; i < BOARD_SIZE; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            board[i][j] = WATER;
        }
    }

    // Adiciona alguns navios para teste
    board[1][2] = SHIP;
    board[1][3] = SHIP;
    board[1][4] = SHIP;

    board[5][5] = SHIP;
    board[6][5] = SHIP;
    board[7][5] = SHIP;
}

// Função para criar a matriz de habilidade em forma de Cone
// O ponto de origem é o topo do cone, expandindo para baixo.
void createConeSkill(int skillMatrix[SKILL_SIZE][SKILL_SIZE]) {
    int center = SKILL_SIZE / 2;
    for (int i = 0; i < SKILL_SIZE; i++) {
        for (int j = 0; j < SKILL_SIZE; j++) {
            // O cone se expande do topo (linha 0) para a base.
            // A largura do cone em cada linha é (2 * i + 1), centrada.
            if (j >= center - i && j <= center + i) {
                skillMatrix[i][j] = 1;
            } else {
                skillMatrix[i][j] = 0;
            }
        }
    }
}

// Função para criar a matriz de habilidade em forma de Cruz
// O ponto de origem é o centro da cruz.
void createCrossSkill(int skillMatrix[SKILL_SIZE][SKILL_SIZE]) {
    int center = SKILL_SIZE / 2;
    for (int i = 0; i < SKILL_SIZE; i++) {
        for (int j = 0; j < SKILL_SIZE; j++) {
            // Se a posição está na linha central ou na coluna central, faz parte da cruz.
            if (i == center || j == center) {
                skillMatrix[i][j] = 1;
            } else {
                skillMatrix[i][j] = 0;
            }
        }
    }
}

// Função para criar a matriz de habilidade em forma de Octaedro (losango)
// O ponto de origem é o centro do losango.
void createOctahedronSkill(int skillMatrix[SKILL_SIZE][SKILL_SIZE]) {
    int center = SKILL_SIZE / 2;
    for (int i = 0; i < SKILL_SIZE; i++) {
        for (int j = 0; j < SKILL_SIZE; j++) {
            // A condição para um losango é |linha_diff| + |coluna_diff| <= raio
            // O raio é 'center' para um losango que preenche a matriz
            if (abs(i - center) + abs(j - center) <= center) {
                skillMatrix[i][j] = 1;
            } else {
                skillMatrix[i][j] = 0;
            }
        }
    }
}

// Função para sobrepor a matriz de habilidade no tabuleiro
void applySkillToBoard(int board[BOARD_SIZE][BOARD_SIZE], int skillMatrix[SKILL_SIZE][SKILL_SIZE], int originRow, int originCol) {
    int skillCenter = SKILL_SIZE / 2;

    for (int i = 0; i < SKILL_SIZE; i++) {
        for (int j = 0; j < SKILL_SIZE; j++) {
            // Calcula as coordenadas no tabuleiro correspondentes à posição na matriz de habilidade
            int boardRow = originRow + (i - skillCenter);
            int boardCol = originCol + (j - skillCenter);

            // Verifica se a posição está dentro dos limites do tabuleiro
            if (boardRow >= 0 && boardRow < BOARD_SIZE && boardCol >= 0 && boardCol < BOARD_SIZE) {
                // Se a posição na matriz de habilidade for 1 (afetada), marca no tabuleiro
                if (skillMatrix[i][j] == 1) {
                    board[boardRow][boardCol] = SKILL_EFFECT;
                }
            }
        }
    }
}

int main() {
    int board[BOARD_SIZE][BOARD_SIZE];
    int skillCone[SKILL_SIZE][SKILL_SIZE];
    int skillCross[SKILL_SIZE][SKILL_SIZE];
    int skillOctahedron[SKILL_SIZE][SKILL_SIZE];

    // Inicializa o tabuleiro
    initializeBoard(board);

    // Cria as matrizes de habilidade
    createConeSkill(skillCone);
    createCrossSkill(skillCross);
    createOctahedronSkill(skillOctahedron);

    printf("--- Tabuleiro Inicial com Navios ---\n");
    printBoard(board);
    printf("\n");

    // Define pontos de origem para as habilidades no tabuleiro
    int coneOriginRow = 2;
    int coneOriginCol = 3;

    int crossOriginRow = 7;
    int crossOriginCol = 2;

    int octahedronOriginRow = 4;
    int octahedronOriginCol = 7;

    // Aplica a habilidade de Cone ao tabuleiro
    // Nota: Para este desafio, as habilidades são cumulativas para fins de visualização.
    // Em um jogo real, você resetaria o tabuleiro ou usaria camadas diferentes.
    applySkillToBoard(board, skillCone, coneOriginRow, coneOriginCol);
    printf("--- Tabuleiro com Habilidade: Cone (Origem: %d,%d) ---\n", coneOriginRow, coneOriginCol);
    printBoard(board);
    printf("\n");

    // Reinicializa o tabuleiro para aplicar a próxima habilidade separadamente
    initializeBoard(board);
    applySkillToBoard(board, skillCross, crossOriginRow, crossOriginCol);
    printf("--- Tabuleiro com Habilidade: Cruz (Origem: %d,%d) ---\n", crossOriginRow, crossOriginCol);
    printBoard(board);
    printf("\n");

    // Reinicializa o tabuleiro para aplicar a próxima habilidade separadamente
    initializeBoard(board);
    applySkillToBoard(board, skillOctahedron, octahedronOriginRow, octahedronOriginCol);
    printf("--- Tabuleiro com Habilidade: Octaedro (Origem: %d,%d) ---\n", octahedronOriginRow, octahedronOriginCol);
    printBoard(board);
    printf("\n");

    // Exemplo de aplicação de múltiplas habilidades (o efeito anterior permanece)
    printf("--- Tabuleiro com Múltiplas Habilidades ---\n");
    initializeBoard(board); // Começa com um tabuleiro limpo com navios
    applySkillToBoard(board, skillCone, coneOriginRow, coneOriginCol);
    applySkillToBoard(board, skillCross, crossOriginRow, crossOriginCol);
    applySkillToBoard(board, skillOctahedron, octahedronOriginRow, octahedronOriginCol);
    printBoard(board);
    printf("\n");

    return 0;
}
